bootstrapped_familiar_between <- bootstrapped_splines(bootstrapped_familiar_timedata,
data_options,
factor = 'Target',
samples=n_sims,
resolution=bootstrap_resolution,
within_subj = F,
alpha = .05)
bootstrapped_familiar_between_samples <- bootstrapped_familiar_between$samples
bootstrapped_familiar_between_divergence <- bootstrapped_familiar_between$divergence
p <- ggplot(bootstrapped_familiar_between_samples, aes(x=t1, y=mean, color=Target)) +
scale_x_continuous(name="Time post Noun-onset (s)", breaks = seq(min(bootstrapped_familiar_between_samples$t1),max(bootstrapped_familiar_between_samples$t1),by=.5)) +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(name="Proportion looking to Animal", breaks = c(0, .25, .5, .75, 1)) +
geom_line() +
geom_smooth(aes(ymin = mean-se, ymax = mean+se), data=bootstrapped_familiar_between_samples, stat="identity") +
theme_bw(base_family = "Arial", base_size = 16) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) + # no borders
theme(panel.border = element_rect(size=1, color='black')) +
theme(axis.title.x = element_text(vjust=-0.3)) + # move x-axis label lower
theme(axis.title.y = element_text(vjust=1.15)) + # move y-axis label left
theme(legend.position = c(.88,.88))
png(filename = 'graph-splines-familiar.png',
width = 3000, height = 2000,
units = "px",
res = 400)
print(p)
dev.off()
p
divergence_length <- sum(rle(bootstrapped_familiar_divergence$Diverged)$lengths[which(rle(bootstrapped_familiar_divergence$Diverged)$values == 1)])
divergence_length <- divergence_length * (bootstrap_resolution / 1000)
divergence_length
random_divergences <- c()
for (i in 1:n_sims) {
# shuffle labels on repeated-measures data...
bootstrapped_familiar_timedata_shuffled <- bootstrapped_familiar_timedata
for (participant in unique(bootstrapped_familiar_timedata_shuffled[, data_options$participant_factor])) {
if (rbinom(1,1,.5) == 1) {
animal_rows <- which(bootstrapped_familiar_timedata_shuffled[, data_options$participant_factor] == participant & bootstrapped_familiar_timedata_shuffled$Target == 'Animal')
artefact_rows <- which(bootstrapped_familiar_timedata_shuffled[, data_options$participant_factor] == participant & bootstrapped_familiar_timedata_shuffled$Target == 'Artefact')
bootstrapped_familiar_timedata_shuffled[animal_rows, 'Target'] <- 'Artefact'
bootstrapped_familiar_timedata_shuffled[artefact_rows, 'Target'] <- 'Animal'
}
}
# run analysis and look at longest divergence using rle()
bootstrapped_shuffled_familiar <- bootstrapped_splines(bootstrapped_familiar_timedata_shuffled,
data_options,
factor = 'Target',
samples=n_sims,
resolution=bootstrap_resolution,
within_subj = T,
alpha = .05)
bootstrapped_shuffled_familiar_samples <- bootstrapped_shuffled_familiar$samples
bootstrapped_shuffled_familiar_divergence <- bootstrapped_shuffled_familiar$divergence
# get list of divergences
shuffled_divergence_lengths <- rle(bootstrapped_shuffled_familiar_divergence$Diverged)$lengths[which(rle(bootstrapped_shuffled_familiar_divergence$Diverged)$values == 1)]
# take total length of divergences
shuffled_divergence_length <- ifelse(length(shuffled_divergence_lengths) > 0, sum(shuffled_divergence_lengths), 0)
random_divergences <- c(random_divergences, ifelse(length(shuffled_divergence_lengths) > 0, shuffled_divergence_length, 0))
}
random_divergences <- random_divergences * (bootstrap_resolution / 1000)
# look at sample of shuffled data
describe(random_divergences)
hist(random_divergences)
# what's the number of times we saw a divergence as big as the one we actually saw?
# note + 1 in the numerator and denominator so that we never get a p-value of 0
cat(paste('Bootstrapped p-value: ',((length(random_divergences[which(random_divergences >= divergence_length)]) + 1) / (n_sims+1)),sep=''))
cat(paste('Assumed normal distribution p-value: ',(1 - pnorm(divergence_length, mean(random_divergences), sd(random_divergences))) * 2,sep=''))
master_unfamiliar <- clean_by_factor(master_clean, data_options, 'Trial', c('UnfamiliarLemur','UnfamiliarRhino','UnfamiliarArmadillo','UnfamiliarLizard','UnfamiliarHedgehog','UnfamiliarFlamingo'))
# get trackloss
unfamiliar_trackloss <- get_trackloss_data(master_unfamiliar, data_options, window_start = 15500, window_end = 21000)
# trim by trackloss MEAN-2*SD
minimum_samples <- mean(unfamiliar_trackloss$trackloss$SamplesLooking) - (2*sd(unfamiliar_trackloss$trackloss$SamplesLooking))
minimum_samples
# minimum is 60 (e.g., 1 second)
if (minimum_samples < 60) {
minimum_samples <- 60
}
master_unfamiliar <- clean_by_trackloss(master_unfamiliar, data_options, window_start = 15500, window_end = 21000, minimum_samples = minimum_samples)
unfamiliar_trial_counts <- final_trial_counts(master_unfamiliar, data_options, window_start = 15500, window_end = 21000)
describe(unfamiliar_trial_counts$Trials)
master_unfamiliar <- remove_trackloss(master_unfamiliar, data_options)
unfamiliar_test_response <- subset_by_window(master_unfamiliar, data_options, window_start = 15500, window_end = 21000)
# aggregate across window
window_unfamiliar_response <- window_analysis(unfamiliar_test_response, data_options, dv = 'Animate', factors=c('Condition','Age','MCDI_Total','MCDI_Nouns','MCDI_Verbs','KnownVerb','KnownAnimal','Verb'))
# aggregate by participants
unfamiliar_agg_response <- aggregate(window_unfamiliar_response$Proportion, by = list(window_unfamiliar_response$ParticipantName,window_unfamiliar_response$Condition,window_unfamiliar_response$Age,window_unfamiliar_response$MCDI_Total,window_unfamiliar_response$MCDI_Nouns,window_unfamiliar_response$MCDI_Verbs), FUN = mean)
colnames(unfamiliar_agg_response) <- c('ParticipantName','Condition','Age','MCDI_Total','MCDI_Nouns','MCDI_Verbs','ProportionAnimate')
plot_data(unfamiliar_test_response, data_options, 'graph-unfamiliar-test.png',
dv = 'Animate', factor = 'Condition', y_title = 'Proportion Looking to Animal', x_title = 'Time post Noun-onset (ms)', bin_time = 250, width = 3000, height = 2000, x_gap = 500)
ggplot(unfamiliar_agg_response, aes(y=ProportionAnimate, x=Condition)) +
geom_boxplot() +
geom_point() +
scale_y_continuous('Proportion Looking toward Animal', breaks = seq(0,1,.25)) +
coord_cartesian(ylim=c(0,1))
condition_means <- ddply(unfamiliar_agg_response, .(Condition), summarize, mean = mean(ProportionAnimate), sd = sd(ProportionAnimate), N = length(ProportionAnimate), Age = mean(Age))
condition_means$se <- condition_means$sd / sqrt(condition_means$N)
condition_means
t.test(unfamiliar_agg_response[which(unfamiliar_agg_response$Condition == 'Informative'), 'ProportionAnimate'],
unfamiliar_agg_response[which(unfamiliar_agg_response$Condition == 'Neutral'), 'ProportionAnimate'],
var.equal = T)
t.test(asin(sqrt(unfamiliar_agg_response[which(unfamiliar_agg_response$Condition == 'Informative'), 'ProportionAnimate'])),
asin(sqrt(unfamiliar_agg_response[which(unfamiliar_agg_response$Condition == 'Neutral'), 'ProportionAnimate'])),
var.equal = T)
t.test(unfamiliar_agg_response[which(unfamiliar_agg_response$Condition == 'Informative'), 'ProportionAnimate'], mu = .5)
t.test(unfamiliar_agg_response[which(unfamiliar_agg_response$Condition == 'Neutral'), 'ProportionAnimate'], mu = .5)
model <- lmer(ArcSin ~ Condition + (1 | Trial) + (1 | ParticipantName), data = window_unfamiliar_response, REML = F)
summary(model)
model_null <- lmer(ArcSin ~ 1 + (1 | Trial) + (1 | ParticipantName), data = window_unfamiliar_response, REML = F)
anova(model,model_null)
unfamiliar_bins <- sequential_bins_analysis(unfamiliar_test_response, data_options,
dv = 'Animate', factor = 'Condition', bin_time = 250)
unfamiliar_bins
first_looks_unfamiliar <- first_looks_analysis(unfamiliar_test_response, data_options, c('Condition'))
agg_first_looks_unfamiliar <- ddply(first_looks_unfamiliar, .(ParticipantName, Condition, FirstAOI), summarize, SecondStartTime = mean(SecondStartTime))
unfamiliar_switches <- ddply(agg_first_looks_unfamiliar, .(Condition,FirstAOI), summarize, SwitchTime = mean(SecondStartTime), SwitchTimeSD = sd(SecondStartTime))
ggplot(agg_first_looks_unfamiliar, aes(x=Condition, y=SecondStartTime, color=FirstAOI)) + geom_boxplot()
bootstrapped_unfamiliar_timedata <- time_analysis(unfamiliar_test_response, data_options, bin_time=16.6666667, dv='Animate', factors=c('Condition'))
# we only need the by-subject stuff
bootstrapped_unfamiliar_timedata <- bootstrapped_unfamiliar_timedata$bySubj
# bootstrap!
bootstrapped_unfamiliar <- bootstrapped_splines(bootstrapped_unfamiliar_timedata,
data_options,
factor = 'Condition',
samples=n_sims,
resolution=bootstrap_resolution,
within_subj = F,
alpha = .05)
bootstrapped_unfamiliar_samples <- bootstrapped_unfamiliar$samples
bootstrapped_unfamiliar_divergence <- bootstrapped_unfamiliar$divergence
bootstrapped_unfamiliar_divergence
p <- ggplot(bootstrapped_unfamiliar_samples, aes(x=t1, y=mean, color=Condition)) +
scale_x_continuous(name="Time post Noun-onset (s)", breaks = seq(min(bootstrapped_unfamiliar_samples$t1),max(bootstrapped_unfamiliar_samples$t1),by=.5)) +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(name="Proportion looking to Animal", breaks = c(0,.25,.5,.75,1)) +
geom_line() +
geom_smooth(aes(ymin = mean-se, ymax = mean+se), data=bootstrapped_unfamiliar_samples, stat="identity") +
theme_bw(base_family = "Arial", base_size = 16) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) + # no borders
theme(panel.border = element_rect(size=1, color='black')) +
theme(axis.title.x = element_text(vjust=-0.3)) + # move x-axis label lower
theme(axis.title.y = element_text(vjust=1.15)) + # move y-axis label left
theme(legend.position = c(.84,.88))
png(filename = 'graph-splines-unfamiliar.png',
width = 3000, height = 2000,
units = "px",
res = 400)
print(p)
dev.off()
p
# get the length of the actual estimated divergence
divergence_length <- sum(rle(bootstrapped_unfamiliar_divergence$Diverged)$lengths[which(rle(bootstrapped_unfamiliar_divergence$Diverged)$values == 1)])
divergence_length <- divergence_length * (bootstrap_resolution / 1000)
divergence_length
random_divergences <- c()
for (i in 1:n_sims) {
# shuffle labels on repeated-measures data...
bootstrapped_unfamiliar_timedata_shuffled <- bootstrapped_unfamiliar_timedata
for (participant in unique(bootstrapped_unfamiliar_timedata_shuffled[, data_options$participant_factor])) {
# maybe this needs to keep in mind that this needs to be balanced
# maybe select all of the subjects and, for a random half, flip their conditions?
bootstrapped_unfamiliar_timedata_shuffled[which(bootstrapped_unfamiliar_timedata_shuffled[, data_options$participant_factor] == participant), 'Condition'] <- ifelse(rbinom(1,1,.5) == 1,'Informative','Neutral')
}
# run analysis and look at longest divergence using rle()
bootstrapped_shuffled_unfamiliar <- bootstrapped_splines(bootstrapped_unfamiliar_timedata_shuffled,
data_options,
factor = 'Condition',
samples=n_sims,
resolution=bootstrap_resolution,
within_subj = F,
alpha = .05)
bootstrapped_shuffled_unfamiliar_samples <- bootstrapped_shuffled_unfamiliar$samples
bootstrapped_shuffled_unfamiliar_divergence <- bootstrapped_shuffled_unfamiliar$divergence
# get list of divergences
shuffled_divergence_lengths <- rle(bootstrapped_shuffled_unfamiliar_divergence$Diverged)$lengths[which(rle(bootstrapped_shuffled_unfamiliar_divergence$Diverged)$values == 1)]
# take total length of divergences
shuffled_divergence_length <- ifelse(length(shuffled_divergence_lengths) > 0, sum(shuffled_divergence_lengths), 0)
random_divergences <- c(random_divergences, ifelse(length(shuffled_divergence_lengths) > 0, shuffled_divergence_length, 0))
}
random_divergences <- random_divergences * (bootstrap_resolution / 1000)
# look at sample of shuffled data
describe(random_divergences)
hist(random_divergences)
# what's the number of times we saw a divergence as big as the one we actually saw?
# note + 1 in the numerator and denominator so that we never get a p-value of 0
cat(paste('Bootstrapped p-value: ',((length(random_divergences[which(random_divergences >= divergence_length)]) + 1) / (n_sims+1)),sep=''))
cat(paste('Assumed normal distribution p-value: ',(1 - pnorm(divergence_length, mean(random_divergences), sd(random_divergences))) * 2,sep=''))
unfamiliar_agg_response$MCDI_Verbs <- as.numeric(as.character(unfamiliar_agg_response$MCDI_Verbs))
unfamiliar_agg_response$MCDI_Nouns <- as.numeric(as.character(unfamiliar_agg_response$MCDI_Nouns))
unfamiliar_agg_response$MCDI_Total <- as.numeric(as.character(unfamiliar_agg_response$MCDI_Total))
unfamiliar_agg_response$Age <- as.numeric(as.character(unfamiliar_agg_response$Age))
model <- lm(ProportionAnimate ~ Age + MCDI_Total, data=subset(unfamiliar_agg_response, Condition == 'Informative'))
summary(model)
model <- lm(ProportionAnimate ~ Age + MCDI_Nouns, data=subset(unfamiliar_agg_response, Condition == 'Informative'))
summary(model)
model <- lm(ProportionAnimate ~ Age + MCDI_Verbs, data=subset(unfamiliar_agg_response, Condition == 'Informative'))
summary(model)
model <- lm(ProportionAnimate ~ Age + MCDI_Verbs + MCDI_Nouns, data=subset(unfamiliar_agg_response, Condition == 'Informative'))
summary(model)
ggplot(subset(unfamiliar_agg_response, Condition == 'Informative'), aes(x=MCDI_Total, y=ProportionAnimate)) + geom_point() + stat_smooth(method="lm")
cor.test(unfamiliar_agg_response[which(unfamiliar_agg_response$Condition == 'Informative'), 'ProportionAnimate'],unfamiliar_agg_response[which(unfamiliar_agg_response$Condition == 'Informative'), 'MCDI_Total'])
ggplot(subset(unfamiliar_agg_response, Condition == 'Informative'), aes(x=MCDI_Nouns, y=ProportionAnimate)) + geom_point() + stat_smooth(method="lm")
cor.test(unfamiliar_agg_response[which(unfamiliar_agg_response$Condition == 'Informative'), 'ProportionAnimate'],unfamiliar_agg_response[which(unfamiliar_agg_response$Condition == 'Informative'), 'MCDI_Nouns'])
ggplot(subset(unfamiliar_agg_response, Condition == 'Informative'), aes(x=MCDI_Verbs, y=ProportionAnimate)) + geom_point() + stat_smooth(method="lm")
cor.test(unfamiliar_agg_response[which(unfamiliar_agg_response$Condition == 'Informative'), 'ProportionAnimate'],unfamiliar_agg_response[which(unfamiliar_agg_response$Condition == 'Informative'), 'MCDI_Verbs'])
condition_means_animalname <-  ddply(window_unfamiliar_response, .(Condition,KnownAnimal), summarize, mean = mean(Proportion), sd = sd(Proportion), N = length(Proportion))
condition_means_animalname$se <- condition_means_animalname$sd / sqrt(condition_means_animalname$sd)
condition_means_animalname
# interacting with Condition
model <- lmer(ArcSin ~ Condition*KnownAnimal + (1 | Trial) + (1 | ParticipantName), data = window_unfamiliar_response, REML = F)
summary(model)
model_null <- lmer(ArcSin ~ 1 + (1 | Trial) + (1 | ParticipantName), data = window_unfamiliar_response, REML = F)
anova(model,model_null)
# by itself
model <- lmer(ArcSin ~ KnownAnimal + (1 | Trial) + (1 | ParticipantName), data = window_unfamiliar_response, REML = F)
summary(model)
model_null <- lmer(ArcSin ~ 1 + (1 | Trial) + (1 | ParticipantName), data = window_unfamiliar_response, REML = F)
anova(model,model_null)
unfamiliar_by_verb <- ddply(window_unfamiliar_response, .(Trial,Verb,Condition), summarize, mean = mean(Proportion), sd=sd(Proportion), N=length(window_unfamiliar_response))
unfamiliar_by_verb$se <- unfamiliar_by_verb$sd / sqrt(unfamiliar_by_verb$N)
unfamiliar_by_verb <- unfamiliar_by_verb[order(unfamiliar_by_verb$Verb, unfamiliar_by_verb$Condition), ]
unfamiliar_by_verb
ggplot(unfamiliar_by_verb, aes(Verb, mean)) + geom_bar(aes(fill = Condition), stat="identity", position = "dodge")
setwd("~/Documents/Academia/Graduate/Studies/ANCAT/Analyses/Informative & Uninformative (15, 19, and 24 months)/15-months")
(1 - pnorm(divergence_length, 0, 1)) * 2
(1 - pnorm(1.96, 0, 1)) * 2
(1 - pnorm(1, 0, 1)) * 2
(1 - pnorm(0.1, 0, 1)) * 2
(1 - pnorm(1000, 0, 10)) * 2
(1 - pnorm(100, 0, 10)) * 2
(1 - pnorm(10, 0, 10)) * 2
(1 - pnorm(25, 0, 10)) * 2
(1 - pnorm(35, 0, 10)) * 2
(1 - pnorm(.24, .34, .42)) * 2
pnorm(.24, .34, .42))
pnorm(.24, .34, .42)
?pnorm
qnorm(.24, .34, .42)
pnorm(.24, .34, .42) * 2
pnorm(.44, .34, .42) * 2
pnorm(.44, .34, .42)
.24/.42
pnorm(.57,0,1)
(.24-.34)/.42
pnorm(.238,0,1)
cat(paste('Assumed normal distribution p-value: ',(1 - pnorm(abs((.96-.3)/.45), 0, 1)) * 2,sep=''))
cat(paste('Assumed normal distribution p-value: ',(1 - pnorm(abs((-.90-.3)/.45), 0, 1)) * 2,sep=''))
cat(paste('Assumed normal distribution p-value: ',(1 - pnorm(abs((-.63-.3)/.45), 0, 1)) * 2,sep=''))
cat(paste('Assumed normal distribution p-value: ',(1 - pnorm(abs((-.33-.3)/.45), 0, 1)) * 2,sep=''))
cat(paste('Assumed normal distribution p-value: ',(1 - pnorm(abs((-.36-.3)/.45), 0, 1)) * 2,sep=''))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
load("~/Documents/Academia/Graduate/Studies/ANCAT/Analyses/Informative & Uninformative (15, 19, and 24 months)/15-months/workspace.Rdata")
ggplot(familiar_agg_response, aes(y=ProportionAnimate, x=Target)) +
geom_boxplot() +
geom_point() +
scale_y_continuous('Proportion Looking toward Animal', breaks = seq(0,1,.25)) +
coord_cartesian(ylim=c(0,1))
ggplot(bootstrapped_familiar_samples, aes(x=t1, y=mean)) +
scale_x_continuous(name="Time (s)", breaks = seq(min(bootstrapped_familiar_samples$t1),max(bootstrapped_familiar_samples$t1),by=.5)) +
scale_y_continuous(name="Proportion") +
geom_line() +
geom_smooth(aes(ymin = mean-se, ymax = mean+se), data=bootstrapped_familiar_samples, stat="identity")
p <- ggplot(bootstrapped_familiar_between_samples, aes(x=t1, y=mean, color=Target)) +
scale_x_continuous(name="Time post Noun-onset (s)", breaks = seq(min(bootstrapped_familiar_between_samples$t1),max(bootstrapped_familiar_between_samples$t1),by=.5)) +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(name="Proportion looking to Animal", breaks = c(0, .25, .5, .75, 1)) +
geom_line() +
geom_smooth(aes(ymin = mean-se, ymax = mean+se), data=bootstrapped_familiar_between_samples, stat="identity") +
theme_bw(base_family = "Arial", base_size = 16) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) + # no borders
theme(panel.border = element_rect(size=1, color='black')) +
theme(axis.title.x = element_text(vjust=-0.3)) + # move x-axis label lower
theme(axis.title.y = element_text(vjust=1.15)) + # move y-axis label left
theme(legend.position = c(.88,.88))
png(filename = 'graph-splines-familiar.png',
width = 3000, height = 2000,
units = "px",
res = 400)
print(p)
dev.off()
p
plot_data(familiar_test_response, data_options, 'graph-familiar-test.png', dv = 'Animate', factor = 'Target', y_title = 'Proportion Looking to Animal', x_title = 'Time post Noun-onset (ms)', bin_time = 250, width = 3000, height = 2000, x_gap = 500)
source('~/Documents/Academia/Graduate/Studies/ANCAT/Analyses/Informative & Uninformative (15, 19, and 24 months)/analyze-eyetracking.R')
plot_data(familiar_test_response, data_options, 'graph-familiar-test.png', dv = 'Animate', factor = 'Target', y_title = 'Proportion Looking to Animal', x_title = 'Time post Noun-onset (ms)', bin_time = 250, width = 3000, height = 2000, x_gap = 500)
p <- ggplot(bootstrapped_familiar_between_samples, aes(x=t1, y=mean, color=Target)) +
scale_x_continuous(name="Time post Noun-onset (s)", breaks = seq(min(bootstrapped_familiar_between_samples$t1),max(bootstrapped_familiar_between_samples$t1),by=.5)) +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(name="Proportion looking to Animal", breaks = c(0, .25, .5, .75, 1)) +
geom_line() +
geom_smooth(aes(ymin = mean-se, ymax = mean+se), data=bootstrapped_familiar_between_samples, stat="identity") +
theme_bw(base_family = "Arial", base_size = 16) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) + # no borders
theme(panel.border = element_rect(size=1, color='black')) +
theme(axis.title.x = element_text(vjust=-0.3)) + # move x-axis label lower
theme(axis.title.y = element_text(vjust=1.15)) + # move y-axis label left
theme(legend.position = c(.88,.12))
png(filename = 'graph-splines-familiar.png',
width = 3000, height = 2000,
units = "px",
res = 400)
print(p)
dev.off()
p
plot_data(unfamiliar_test_response, data_options, 'graph-unfamiliar-test.png',
dv = 'Animate', factor = 'Condition', y_title = 'Proportion Looking to Animal', x_title = 'Time post Noun-onset (ms)', bin_time = 250, width = 3000, height = 2000, x_gap = 500)
source('~/Documents/Academia/Graduate/Studies/ANCAT/Analyses/Informative & Uninformative (15, 19, and 24 months)/analyze-eyetracking.R')
plot_data(unfamiliar_test_response, data_options, 'graph-unfamiliar-test.png',
dv = 'Animate', factor = 'Condition', y_title = 'Proportion Looking to Animal', x_title = 'Time post Noun-onset (ms)', bin_time = 250, width = 3000, height = 2000, x_gap = 500)
p <- ggplot(bootstrapped_unfamiliar_samples, aes(x=t1, y=mean, color=Condition)) +
scale_x_continuous(name="Time post Noun-onset (s)", breaks = seq(min(bootstrapped_unfamiliar_samples$t1),max(bootstrapped_unfamiliar_samples$t1),by=.5)) +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(name="Proportion looking to Animal", breaks = c(0,.25,.5,.75,1)) +
geom_line() +
geom_smooth(aes(ymin = mean-se, ymax = mean+se), data=bootstrapped_unfamiliar_samples, stat="identity") +
theme_bw(base_family = "Arial", base_size = 16) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) + # no borders
theme(panel.border = element_rect(size=1, color='black')) +
theme(axis.title.x = element_text(vjust=-0.3)) + # move x-axis label lower
theme(axis.title.y = element_text(vjust=1.15)) + # move y-axis label left
theme(legend.position = c(.84,.88))
png(filename = 'graph-splines-unfamiliar.png',
width = 3000, height = 2000,
units = "px",
res = 400)
print(p)
dev.off()
p
p <- ggplot(bootstrapped_unfamiliar_samples, aes(x=t1, y=mean, color=Condition)) +
scale_x_continuous(name="Time post Noun-onset (s)", breaks = seq(min(bootstrapped_unfamiliar_samples$t1),max(bootstrapped_unfamiliar_samples$t1),by=.5)) +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(name="Proportion looking to Animal", breaks = c(0,.25,.5,.75,1)) +
geom_line() +
geom_smooth(aes(ymin = mean-se, ymax = mean+se), data=bootstrapped_unfamiliar_samples, stat="identity") +
theme_bw(base_family = "Arial", base_size = 16) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) + # no borders
theme(panel.border = element_rect(size=1, color='black')) +
theme(axis.title.x = element_text(vjust=-0.3)) + # move x-axis label lower
theme(axis.title.y = element_text(vjust=1.15)) + # move y-axis label left
theme(legend.position = c(.86,.12))
png(filename = 'graph-splines-unfamiliar.png',
width = 3000, height = 2000,
units = "px",
res = 400)
print(p)
dev.off()
p
plot_data(familiar_test_response, data_options, 'graph-familiar-test.png', dv = 'Animate', factor = 'Target', y_title = 'Proportion Looking to Animal', x_title = 'Time post Noun-onset (ms)', bin_time = 250, width = 3000, height = 2000, x_gap = 500)
save.image("~/Documents/Academia/Graduate/Studies/ANCAT/Analyses/Informative & Uninformative (15, 19, and 24 months)/15-months/workspace.RData")
load("~/Documents/Academia/Graduate/Studies/ANCAT/Analyses/Informative & Uninformative (15, 19, and 24 months)/19-months/workspace.Rdata")
setwd("~/Documents/Academia/Graduate/Studies/ANCAT/Analyses/Informative & Uninformative (15, 19, and 24 months)/19-months")
source('~/Documents/Academia/Graduate/Studies/ANCAT/Analyses/Informative & Uninformative (15, 19, and 24 months)/analyze-eyetracking.R')
plot_data(familiar_test_response, data_options, 'graph-familiar-test.png', dv = 'Animate', factor = 'Target', y_title = 'Proportion Looking to Animal', x_title = 'Time post Noun-onset (ms)', bin_time = 250, width = 3000, height = 2000, x_gap = 500)
p <- ggplot(bootstrapped_familiar_between_samples, aes(x=t1, y=mean, color=Target)) +
scale_x_continuous(name="Time post Noun-onset (s)", breaks = seq(min(bootstrapped_familiar_between_samples$t1),max(bootstrapped_familiar_between_samples$t1),by=.5)) +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(name="Proportion looking to Animal", breaks = c(0, .25, .5, .75, 1)) +
geom_line() +
geom_smooth(aes(ymin = mean-se, ymax = mean+se), data=bootstrapped_familiar_between_samples, stat="identity") +
theme_bw(base_family = "Arial", base_size = 16) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) + # no borders
theme(panel.border = element_rect(size=1, color='black')) +
theme(axis.title.x = element_text(vjust=-0.3)) + # move x-axis label lower
theme(axis.title.y = element_text(vjust=1.15)) + # move y-axis label left
theme(legend.position = c(.88,.88))
png(filename = 'graph-splines-familiar.png',
width = 3000, height = 2000,
units = "px",
res = 400)
print(p)
dev.off()
p
p <- ggplot(bootstrapped_familiar_between_samples, aes(x=t1, y=mean, color=Target)) +
scale_x_continuous(name="Time post Noun-onset (s)", breaks = seq(min(bootstrapped_familiar_between_samples$t1),max(bootstrapped_familiar_between_samples$t1),by=.5)) +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(name="Proportion looking to Animal", breaks = c(0, .25, .5, .75, 1)) +
geom_line() +
geom_smooth(aes(ymin = mean-se, ymax = mean+se), data=bootstrapped_familiar_between_samples, stat="identity") +
theme_bw(base_family = "Arial", base_size = 16) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) + # no borders
theme(panel.border = element_rect(size=1, color='black')) +
theme(axis.title.x = element_text(vjust=-0.3)) + # move x-axis label lower
theme(axis.title.y = element_text(vjust=1.15)) + # move y-axis label left
theme(legend.position = c(.86,.88))
png(filename = 'graph-splines-familiar.png',
width = 3000, height = 2000,
units = "px",
res = 400)
print(p)
dev.off()
p
plot_data(unfamiliar_test_response, data_options, 'graph-unfamiliar-test.png',
dv = 'Animate', factor = 'Condition', y_title = 'Proportion Looking to Animal', x_title = 'Time post Noun-onset (ms)', bin_time = 250, width = 3000, height = 2000, x_gap = 500)
p <- ggplot(bootstrapped_unfamiliar_samples, aes(x=t1, y=mean, color=Condition)) +
scale_x_continuous(name="Time post Noun-onset (s)", breaks = seq(min(bootstrapped_unfamiliar_samples$t1),max(bootstrapped_unfamiliar_samples$t1),by=.5)) +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(name="Proportion looking to Animal", breaks = c(0,.25,.5,.75,1)) +
geom_line() +
geom_smooth(aes(ymin = mean-se, ymax = mean+se), data=bootstrapped_unfamiliar_samples, stat="identity") +
theme_bw(base_family = "Arial", base_size = 16) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) + # no borders
theme(panel.border = element_rect(size=1, color='black')) +
theme(axis.title.x = element_text(vjust=-0.3)) + # move x-axis label lower
theme(axis.title.y = element_text(vjust=1.15)) + # move y-axis label left
theme(legend.position = c(.86,.12))
png(filename = 'graph-splines-unfamiliar.png',
width = 3000, height = 2000,
units = "px",
res = 400)
print(p)
dev.off()
p
plot_data(familiar_test_response, data_options, 'graph-familiar-test.png', dv = 'Animate', factor = 'Target', y_title = 'Proportion Looking to Animal', x_title = 'Time post Noun-onset (ms)', bin_time = 250, width = 3000, height = 2000, x_gap = 500)
save.image("~/Documents/Academia/Graduate/Studies/ANCAT/Analyses/Informative & Uninformative (15, 19, and 24 months)/19-months/workspace.RData")
setwd("~/Documents/Academia/Graduate/Studies/ANCAT/Analyses/Informative & Uninformative (15, 19, and 24 months)/24-months")
load("~/Documents/Academia/Graduate/Studies/ANCAT/Analyses/Informative & Uninformative (15, 19, and 24 months)/24-months/workspace.Rdata")
source('~/Documents/Academia/Graduate/Studies/ANCAT/Analyses/Informative & Uninformative (15, 19, and 24 months)/analyze-eyetracking.R')
setwd("~/Documents/Academia/Graduate/Studies/ANCAT/Analyses/Informative & Uninformative (15, 19, and 24 months)/24-months")
plot_data(familiar_test_response, data_options, 'graph-familiar-test.png', dv = 'Animate', factor = 'Target', y_title = 'Proportion Looking to Animal', x_title = 'Time post Noun-onset (ms)', bin_time = 250, width = 3000, height = 2000, x_gap = 500)
p <- ggplot(bootstrapped_familiar_between_samples, aes(x=t1, y=mean, color=Target)) +
scale_x_continuous(name="Time post Noun-onset (s)", breaks = seq(min(bootstrapped_familiar_between_samples$t1),max(bootstrapped_familiar_between_samples$t1),by=.5)) +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(name="Proportion looking to Animal", breaks = c(0, .25, .5, .75, 1)) +
geom_line() +
geom_smooth(aes(ymin = mean-se, ymax = mean+se), data=bootstrapped_familiar_between_samples, stat="identity") +
theme_bw(base_family = "Arial", base_size = 16) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) + # no borders
theme(panel.border = element_rect(size=1, color='black')) +
theme(axis.title.x = element_text(vjust=-0.3)) + # move x-axis label lower
theme(axis.title.y = element_text(vjust=1.15)) + # move y-axis label left
theme(legend.position = c(.86,.12))
png(filename = 'graph-splines-familiar.png',
width = 3000, height = 2000,
units = "px",
res = 400)
print(p)
dev.off()
p
plot_data(unfamiliar_test_response, data_options, 'graph-unfamiliar-test.png',
dv = 'Animate', factor = 'Condition', y_title = 'Proportion Looking to Animal', x_title = 'Time post Noun-onset (ms)', bin_time = 250, width = 3000, height = 2000, x_gap = 500)
p <- ggplot(bootstrapped_unfamiliar_samples, aes(x=t1, y=mean, color=Condition)) +
scale_x_continuous(name="Time post Noun-onset (s)", breaks = seq(min(bootstrapped_unfamiliar_samples$t1),max(bootstrapped_unfamiliar_samples$t1),by=.5)) +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(name="Proportion looking to Animal", breaks = c(0,.25,.5,.75,1)) +
geom_line() +
geom_smooth(aes(ymin = mean-se, ymax = mean+se), data=bootstrapped_unfamiliar_samples, stat="identity") +
theme_bw(base_family = "Arial", base_size = 16) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) + # no borders
theme(panel.border = element_rect(size=1, color='black')) +
theme(axis.title.x = element_text(vjust=-0.3)) + # move x-axis label lower
theme(axis.title.y = element_text(vjust=1.15)) + # move y-axis label left
theme(legend.position = c(.84,.88))
png(filename = 'graph-splines-unfamiliar.png',
width = 3000, height = 2000,
units = "px",
res = 400)
print(p)
dev.off()
p
p <- ggplot(bootstrapped_unfamiliar_samples, aes(x=t1, y=mean, color=Condition)) +
scale_x_continuous(name="Time post Noun-onset (s)", breaks = seq(min(bootstrapped_unfamiliar_samples$t1),max(bootstrapped_unfamiliar_samples$t1),by=.5)) +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(name="Proportion looking to Animal", breaks = c(0,.25,.5,.75,1)) +
geom_line() +
geom_smooth(aes(ymin = mean-se, ymax = mean+se), data=bootstrapped_unfamiliar_samples, stat="identity") +
theme_bw(base_family = "Arial", base_size = 16) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) + # no borders
theme(panel.border = element_rect(size=1, color='black')) +
theme(axis.title.x = element_text(vjust=-0.3)) + # move x-axis label lower
theme(axis.title.y = element_text(vjust=1.15)) + # move y-axis label left
theme(legend.position = c(.86,.12))
png(filename = 'graph-splines-unfamiliar.png',
width = 3000, height = 2000,
units = "px",
res = 400)
print(p)
dev.off()
p
save.image("~/Documents/Academia/Graduate/Studies/ANCAT/Analyses/Informative & Uninformative (15, 19, and 24 months)/24-months/workspace.RData")
load("~/Documents/Academia/Graduate/Studies/ANCAT/Analyses/Informative & Uninformative (15, 19, and 24 months)/19-months/workspace.RData")
setwd("~/Documents/Academia/Graduate/Studies/ANCAT/Analyses/Informative & Uninformative (15, 19, and 24 months)/19-months")
p <- ggplot(bootstrapped_familiar_between_samples, aes(x=t1, y=mean, color=Target)) +
scale_x_continuous(name="Time post Noun-onset (s)", breaks = seq(min(bootstrapped_familiar_between_samples$t1),max(bootstrapped_familiar_between_samples$t1),by=.5)) +
coord_cartesian(ylim=c(0,1)) +
scale_y_continuous(name="Proportion looking to Animal", breaks = c(0, .25, .5, .75, 1)) +
geom_line() +
geom_smooth(aes(ymin = mean-se, ymax = mean+se), data=bootstrapped_familiar_between_samples, stat="identity") +
theme_bw(base_family = "Arial", base_size = 16) +
theme(panel.grid.minor = element_blank()) +
theme(panel.grid.major = element_blank()) + # no borders
theme(panel.border = element_rect(size=1, color='black')) +
theme(axis.title.x = element_text(vjust=-0.3)) + # move x-axis label lower
theme(axis.title.y = element_text(vjust=1.15)) + # move y-axis label left
theme(legend.position = c(.86,.12))
png(filename = 'graph-splines-familiar.png',
width = 3000, height = 2000,
units = "px",
res = 400)
print(p)
dev.off()
p
