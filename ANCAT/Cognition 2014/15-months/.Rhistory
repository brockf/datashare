library(tidyr)
library(stringr)
library(bootstrap)
library(ggplot2)
install.packages("bootstrap", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
# clear all previous variables
rm(list=ls())
#load libraries for data manipulation and graphing
library(dplyr)
library(directlabels)
library(RMySQL)
library(tidyr)
library(stringr)
library(bootstrap)
library(ggplot2)
wordbank <- src_mysql(dbname='wordbank',host="54.200.225.86",
user="wordbank",password="wordbank")
## Show the wordbank tables
print(wordbank)
admin.table <- tbl(wordbank,"common_administration")
child.table <- tbl(wordbank,"common_child")
ws.table <- tbl(wordbank,"instruments_ws")
ws.vocab.words <- as.data.frame(select(ws.table,
basetable_ptr_id,
col_baabaa:col_connthen)) %>%
rename(id = basetable_ptr_id) %>% # Rename the id
gather(word,produces,col_baabaa:col_connthen) %>% # Arrange in longform
mutate(word = str_replace(word, "col_", "")) # Strip off col_ from words
ws.vocab.words <- as.tbl(ws.vocab.words)
# The child by word representation
print(ws.vocab.words)
library(dplyr)
ws.vocab.words <- as.data.frame(select(ws.table,
basetable_ptr_id,
col_baabaa:col_connthen)) %>%
rename(id = basetable_ptr_id) %>% # Rename the id
gather(word,produces,col_baabaa:col_connthen) %>% # Arrange in longform
mutate(word = str_replace(word, "col_", "")) # Strip off col_ from words
ws.vocab.words <- as.tbl(ws.vocab.words)
?rename
??rename
library(plyr)
ws.vocab.words <- as.data.frame(select(ws.table,
basetable_ptr_id,
col_baabaa:col_connthen)) %>%
rename(id = basetable_ptr_id) %>% # Rename the id
gather(word,produces,col_baabaa:col_connthen) %>% # Arrange in longform
mutate(word = str_replace(word, "col_", "")) # Strip off col_ from words
ws.vocab.words <- as.tbl(ws.vocab.words)
basetable_ptr_id
ws.vocab.words <- as.data.frame(select(ws.table,
basetable_ptr_id,
col_baabaa:col_connthen)) %>%
rename(c(id = basetable_ptr_id)) %>% # Rename the id
gather(word,produces,col_baabaa:col_connthen) %>% # Arrange in longform
mutate(word = str_replace(word, "col_", "")) # Strip off col_ from words
ws.vocab.words <- as.tbl(ws.vocab.words)
ws.vocab.words <- as.data.frame(select(ws.table,
basetable_ptr_id,
col_baabaa:col_connthen)) %>%
rename(id = basetable_ptr_id) %>% # Rename the id
gather(word,produces,col_baabaa:col_connthen) %>% # Arrange in longform
mutate(word = str_replace(word, "col_", "")) # Strip off col_ from words
ws.vocab.words <- as.tbl(ws.vocab.words)
ws.vocab.words <- as.data.frame(select(ws.table,
+                                        basetable_ptr_id,
+                                        col_baabaa:col_connthen))
head(ws.vocab.words)
rename(ws.vocab.words, basetable_ptr_id = id)
rename(ws.vocab.words, c(basetable_ptr_id = id))
View(ws.vocab.words)
test <- rename(ws.vocab.words, c(basetable_ptr_id = id))
View(test)
test <- rename(ws.vocab.words, c('basetable_ptr_id' = 'id'))
View(test)
ws.vocab.words <- as.data.frame(select(ws.table,
basetable_ptr_id,
col_baabaa:col_connthen)) %>%
rename(c(basetable_ptr_id = 'id')) %>% # Rename the id
gather(word,produces,col_baabaa:col_connthen) %>% # Arrange in longform
mutate(word = str_replace(word, "col_", "")) # Strip off col_ from words
ws.vocab.words <- as.tbl(ws.vocab.words)
head(ws.vocab.words)
View(test)
ws.vocab.words <- as.data.frame(select(ws.table,
basetable_ptr_id,
col_baabaa:col_connthen)) %>%
rename(c('basetable_ptr_id' = 'id')) %>% # Rename the id
gather(word,produces,col_baabaa:col_connthen) %>% # Arrange in longform
mutate(word = str_replace(word, "col_", "")) # Strip off col_ from words
ws.vocab.words <- as.tbl(ws.vocab.words)
ws.vocab.words <- as.data.frame(select(ws.table,
basetable_ptr_id,
col_baabaa:col_connthen)) %>%
rename(basetable_ptr_id = id)) %>% # Rename the id
gather(word,produces,col_baabaa:col_connthen) %>% # Arrange in longform
mutate(word = str_replace(word, "col_", "")) # Strip off col_ from words
ws.vocab.words <- as.tbl(ws.vocab.words)
ws.vocab.words <- as.data.frame(select(ws.table,
basetable_ptr_id,
col_baabaa:col_connthen)) %>%
rename(basetable_ptr_id = id)) %>% # Rename the id
gather(word,produces,col_baabaa:col_connthen) %>% # Arrange in longform
mutate(word = str_replace(word, "col_", "")) # Strip off col_ from words
ws.vocab.words <- as.tbl(ws.vocab.words)
ws.vocab.words <- as.data.frame(select(ws.table,
basetable_ptr_id,
col_baabaa:col_connthen)) %>%
rename(c(basetable_ptr_id = id)) %>% # Rename the id
gather(word,produces,col_baabaa:col_connthen) %>% # Arrange in longform
mutate(word = str_replace(word, "col_", "")) # Strip off col_ from words
ws.vocab.words <- as.tbl(ws.vocab.words)
head(ws.vocab.words)
ws.vocab.words <- as.data.frame(select(ws.table,
basetable_ptr_id,
col_baabaa:col_connthen)) %>%
rename(c('basetable_ptr_id' = 'id')) %>% # Rename the id
gather(word,produces,col_baabaa:col_connthen) %>% # Arrange in longform
mutate(word = str_replace(word, "col_", "")) # Strip off col_ from words
ws.vocab.words <- as.tbl(ws.vocab.words)
head(ws.vocab.words)
ws.scores <- as.tbl(ws.vocab.words %>%
group_by(id) %>% # Group by child
summarise(productive = sum(produces))) # Compute productive vocabulary
View(ws.scores)
ws.scores <- as.tbl(ws.vocab.words %>%
group_by('id') %>% # Group by child
summarise(productive = sum(produces))) # Compute productive vocabulary
View(ws.scores)
colnames(ws.vocab.words)
install.packages(c("data.table", "highr", "knitr", "mime", "psych"))
install.packages(c("boot", "car", "caTools", "class", "cluster", "codetools", "DescTools", "dplyr", "Formula", "gplots", "Hmisc", "KernSmooth", "labeling", "lme4", "lmerTest", "lpSolve", "MASS", "Matrix", "mediation", "minqa", "nlme", "pbkrtest", "Rcpp", "RcppEigen", "sandwich"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("boot", "car", "caTools", "class", "cluster",
))
install.packages(c("boot", "car", "caTools", "class", "cluster"))
# clear all previous variables
rm(list=ls())
#load libraries for data manipulation and graphing
library(dplyr)
library(plyr)
library(directlabels)
library(RMySQL)
library(tidyr)
library(stringr)
library(bootstrap)
library(ggplot2)
## Open database connection
wordbank <- src_mysql(dbname='wordbank',host="54.200.225.86",
user="wordbank",password="wordbank")
## Show the wordbank tables
print(wordbank)
ws.vocab.words <- as.data.frame(select(ws.table,
basetable_ptr_id,
col_baabaa:col_connthen)) %>%
rename(c('basetable_ptr_id' = 'id')) %>% # Rename the id
gather(word,produces,col_baabaa:col_connthen) %>% # Arrange in longform
mutate(word = str_replace(word, "col_", "")) # Strip off col_ from words
ws.vocab.words <- as.tbl(ws.vocab.words)
# The child by word representation
# print(ws.vocab.words)
ws.scores <- as.tbl(ws.vocab.words %>%
group_by('id') %>% # Group by child
summarise(productive = sum(produces))) # Compute productive vocabulary
# clear all previous variables
rm(list=ls())
#load libraries for data manipulation and graphing
library(dplyr)
library(plyr)
library(directlabels)
library(RMySQL)
library(tidyr)
library(stringr)
library(bootstrap)
library(ggplot2)
wordbank <- src_mysql(dbname='wordbank',host="54.200.225.86",
user="wordbank",password="wordbank")
ws.vocab.words <- as.data.frame(select(ws.table,
basetable_ptr_id,
col_baabaa:col_connthen)) %>%
rename(c('basetable_ptr_id' = 'id')) %>% # Rename the id
gather(word,produces,col_baabaa:col_connthen) %>% # Arrange in longform
mutate(word = str_replace(word, "col_", "")) # Strip off col_ from words
ws.vocab.words <- as.tbl(ws.vocab.words)
ws.vocab.words <- as.data.frame(select(ws.table,
basetable_ptr_id,
col_baabaa:col_connthen)) %>%
rename(id = basetable_ptr_id) %>% # Rename the id
gather(word,produces,col_baabaa:col_connthen) %>% # Arrange in longform
mutate(word = str_replace(word, "col_", "")) # Strip off col_ from words
ws.vocab.words <- as.tbl(ws.vocab.words)
ws.vocab.words <- as.data.frame(select(ws.table,
basetable_ptr_id,
col_baabaa:col_connthen))
admin.table <- tbl(wordbank,"common_administration")
child.table <- tbl(wordbank,"common_child")
ws.table <- tbl(wordbank,"instruments_ws")
ws.vocab.words <- as.data.frame(select(ws.table,
basetable_ptr_id,
col_baabaa:col_connthen)) %>%
rename(id = basetable_ptr_id) %>% # Rename the id
gather(word,produces,col_baabaa:col_connthen) %>% # Arrange in longform
mutate(word = str_replace(word, "col_", "")) # Strip off col_ from words
ws.vocab.words <- as.tbl(ws.vocab.words)
ws.vocab.words <- as.data.frame(select(ws.table,
basetable_ptr_id,
col_baabaa:col_connthen)) %>%
rename(c(id = basetable_ptr_id)) %>% # Rename the id
gather(word,produces,col_baabaa:col_connthen) %>% # Arrange in longform
mutate(word = str_replace(word, "col_", "")) # Strip off col_ from words
ws.vocab.words <- as.tbl(ws.vocab.words)
ws.vocab.words <- as.data.frame(select(ws.table,
basetable_ptr_id,
col_baabaa:col_connthen)) %>%
rename(c(basetable_ptr_id = id)) %>% # Rename the id
gather(word,produces,col_baabaa:col_connthen) %>% # Arrange in longform
mutate(word = str_replace(word, "col_", "")) # Strip off col_ from words
ws.vocab.words <- as.tbl(ws.vocab.words)
ws.scores <- as.tbl(ws.vocab.words %>%
group_by('id') %>% # Group by child
summarise(productive = sum(produces))) # Compute productive vocabulary
View(ws.vocab.words)
ws.vocab.words <- as.data.frame(select(ws.table,
basetable_ptr_id,
col_baabaa:col_connthen)) %>%
rename(c(basetable_ptr_id = 'id')) %>% # Rename the id
gather(word,produces,col_baabaa:col_connthen) %>% # Arrange in longform
mutate(word = str_replace(word, "col_", "")) # Strip off col_ from words
ws.vocab.words <- as.tbl(ws.vocab.words)
colnames(ws.vocab.words)
ws.scores <- as.tbl(ws.vocab.words %>%
group_by('id') %>% # Group by child
summarise(productive = sum(produces))) # Compute productive vocabulary
View(ws.scores)
ws.scores <- ddply(ws.vocab.words, .(id), summarize, productive = sum(produces))
View(ws.scores)
ws.scores <- as.tbl(ws.vocab.words %>%
group_by(id) %>% # Group by child
summarise(productive = sum(produces))) # Compute productive vocabulary
ws.scores <- as.tbl(ws.vocab.words %>%
group_by(id) %>% # Group by child
summarise(productive = sum(produces))) # Compute productive vocabulary
ws.scores <- ddply(ws.vocab.words, .(id), summarize, productive = sum(produces))
admins <- admin.table %>%
select(data_id,child_id,age,source_id) %>%
rename(id = data_id, child.id = child_id,source.id = source_id)
admins <- as.data.frame(admins)
admins <- admin.table %>%
select(data_id,child_id,age,source_id) %>%
rename(c(id = 'data_id', child.id = 'child_id', source.id = 'source_id'))
admins <- as.data.frame(admins)
admins <- admin.table %>%
select(data_id,child_id,age,source_id) %>%
rename(c('id' = 'data_id', 'child.id' = 'child_id', 'source.id' = 'source_id'))
admins <- as.data.frame(admins)
summary(admins)
admins <- admin.table %>%
select(data_id,child_id,age,source_id)
admins <- as.data.frame(admins)
summary(admins)
admins <- admin.table %>%
select(data_id,child_id,age,source_id) %>%
rename(c(data_id = 'id', child_id = 'child.id', source_id = 'source.id'))
admins <- admin.table %>%
select(data_id,child_id,age,source_id)
admins <- admin.table %>%
select(data_id,child_id,age,source_id) %>%
rename(c('data_id' = 'id', 'child_id' = 'child.id', 'source_id' = 'source.id'))
admins <- admin.table %>%
select(data_id,child_id,age,source_id)
summary(admins)
admins <- as.data.frame(admins)
summary(admins)
demos <- select(child.table,id,gender,mom_ed,birth_order) %>%
rename(child.id = id) # Rename id fields
demos <- as.data.frame(demos)
demos <- select(child.table,id,gender,mom_ed,birth_order) %>%
rename(c(child.id = id)) # Rename id fields
demos <- as.data.frame(demos)
demos <- select(child.table,id,gender,mom_ed,birth_order)
summary(demos)
demos <- as.data.frame(demos)
summary(demos)
summary(admins)
admins <- admin.table %>%
select(data_id,child_id,age,source_id) %>%
rename(c(data_id = 'id'))
admins <- as.data.frame(admins)
rename(c(data_id = 'id'))
rename(admins, c(data_id = 'id'))
admins <- admin.table %>%
select(data_id,child_id,age,source_id) %>%
admins <- as.data.frame(admins) %>%
rename(admins, c(data_id = 'id'))
admins <- admin.table %>%
select(data_id,child_id,age,source_id) %>%
admins <- as.data.frame(admins) %>%
rename(c(data_id = 'id'))
admins <- admin.table %>%
select(data_id,child_id,age,source_id) %>%
as.data.frame(admins) %>%
rename(c(data_id = 'id'))
admins <- admin.table %>%
as.data.frame(select(data_id,child_id,age,source_id)) %>%
rename(c(data_id = 'id'))
admins <- admin.table %>%
as.data.frame(select(data_id,child_id,age,source_id)) %>%
rename(c(data_id = 'id', child_id = 'child.id', source_id = 'source.id'))
demos <- as.data.frame(select(child.table,id,gender,mom_ed,birth_order)) %>%
rename(c(child.id = 'id'))
demos <- as.data.frame(select(child.table,id,gender,mom_ed,birth_order))
summary(demos)
demos <- as.data.frame(select(child.table,id,gender,mom_ed,birth_order)) %>%
rename(c(id = 'child.id'))
child.data <- as.tbl(left_join(admins,demos))
head(child.data)
head(demos)
head(admins)
ws.data <- left_join(ws.scores, child.data) %>%
filter(age >= 16 & age <= 30, # filter down to just relevant range
source.id == 1) %>% # Just the original norming data
select(-child.id,-source.id) #drop redundant columns
# clear all previous variables
rm(list=ls())
#load libraries for data manipulation and graphing
library(dplyr)
library(plyr)
library(directlabels)
library(RMySQL)
library(tidyr)
library(stringr)
library(bootstrap)
library(ggplot2)
## Open database connection
wordbank <- src_mysql(dbname='wordbank',host="54.200.225.86",
user="wordbank",password="wordbank")
## Show the wordbank tables
print(wordbank)
## Load relevant tables
admin.table <- tbl(wordbank,"common_administration")
child.table <- tbl(wordbank,"common_child")
ws.table <- tbl(wordbank,"instruments_ws")
# Select just the MCDI words from the Words and Sentences Table
ws.vocab.words <- as.data.frame(select(ws.table,
basetable_ptr_id,
col_baabaa:col_connthen)) %>%
rename(c(basetable_ptr_id = 'id')) %>% # Rename the id
gather(word,produces,col_baabaa:col_connthen) %>% # Arrange in longform
mutate(word = str_replace(word, "col_", "")) # Strip off col_ from words
ws.vocab.words <- as.tbl(ws.vocab.words)
# The child by word representation
print(ws.vocab.words)
# Compute a productive vocabulary for each child
# Brock: doesn't run properly for me... collapses to one row
#  ws.scores <- as.tbl(ws.vocab.words %>%
#   group_by(id) %>% # Group by child
#   summarise(productive = sum(produces))) # Compute productive vocabulary
ws.scores <- ddply(ws.vocab.words, .(id), summarize, productive = sum(produces))
# The child by productive vocabulary representation
print(ws.scores)
# Get the age of each child
admins <- admin.table %>%
as.data.frame(select(data_id,child_id,age,source_id)) %>%
rename(c(data_id = 'id', child_id = 'child.id', source_id = 'source.id'))
# Get demographic variables for each child
demos <- as.data.frame(select(child.table,id,gender,mom_ed,birth_order)) %>%
rename(c(id = 'child.id')) # Rename id fields
# Join age and demographics together
child.data <- as.tbl(left_join(admins,demos))
# Show demographics
print(child.data)
ws.data <- left_join(ws.scores, child.data) %>%
filter(age >= 16 & age <= 30, # filter down to just relevant range
source.id == 1) %>% # Just the original norming data
select(-child.id,-source.id) #drop redundant columns
ws.data <- left_join(ws.scores, child.data)
colnames(child.data)
colnames(ws.scores)
summary(child.data)
summary(ws.scores)
ws.data <- left_join(child.data, ws.scores)
ws.data <- left_join(child.data, ws.scores) %>%
filter(age >= 16 & age <= 30, # filter down to just relevant range
source.id == 1) %>% # Just the original norming data
select(-child.id,-source.id) #drop redundant columns
## Functions for bootstrapping 95% confidence intervals
na.median <- function(x) {median(x,na.rm=T)}
theta <- function(x,xdata,na.rm=T) {median(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
median(x,na.rm=na.rm) -
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,
.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,
.975,na.rm=na.rm) - median(x,na.rm=na.rm)}
productive.vocab <- ws.data %>%
group_by(age,gender) %>%
summarise(
median = median(productive),
ci.l = ci.low(productive),
ci.h = ci.high(productive),
n = n())
#Show productive vocabulary estimates
head(productive.vocab)
productive.vocab <- ws.data %>%
group_by(age,gender) %>%
summarise(
median = median(productive),
ci.l = ci.low(productive),
ci.h = ci.high(productive),
n = length(productive))
View(productive.vocab)
summary(ws.data)
View(ws.data)
install.packages(c("boot", "car", "caTools", "class", "cluster", "codetools", "DescTools", "dplyr", "Formula", "gplots", "Hmisc", "KernSmooth", "labeling", "lme4", "lmerTest", "lpSolve", "MASS", "Matrix", "mediation", "minqa", "nlme", "pbkrtest", "Rcpp", "RcppEigen", "sandwich"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("boot", "car", "caTools", "class", "cluster",
install.packages(c("boot", "car", "caTools", "class", "cluster", "codetools", "DescTools", "dplyr", "Formula", "gplots", "Hmisc", "KernSmooth", "labeling", "lme4", "lmerTest", "lpSolve", "MASS", "Matrix", "mediation", "minqa", "nlme", "pbkrtest", "Rcpp", "RcppEigen", "sandwich"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
productive.vocab <- ws.data %>%
group_by(age,gender) %>%
summarise(
median = median(productive),
ci.l = ci.low(productive),
ci.h = ci.high(productive),
n = n())
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
productive.vocab <- ws.data %>%
group_by(age,gender) %>%
summarise(
median = median(productive),
ci.l = ci.low(productive),
ci.h = ci.high(productive),
n = length(productive))
productive_vocab <- ddply(ws.data, .(age,gender), summarize, median = median(productive), ci.l = ci.low(productive), ci.h = ci.high(productive), n = length(productive))
head(productive.vocab)
View(productive.vocab)
productive_vocab <- ddply(ws.data, .(age,gender), summarize, median = median(productive), ci.l = ci.low(productive), ci.h = ci.high(productive), n = length(productive))
head(ws.data)
View(ws.data)
summary(ws.data)
ws.data$gender <- factor(ws.data$gender)
productive_vocab <- ddply(ws.data, .(age,gender), summarize, median = median(productive), ci.l = ci.low(productive), ci.h = ci.high(productive), n = length(productive))
productive_vocab <- ddply(ws.data, .(gender), summarize, median = median(productive), ci.l = ci.low(productive), ci.h = ci.high(productive), n = length(productive))
productive.vocab <- ddply(ws.data, .(age,gender), summarize, median = median(productive), ci.l = ci.low(productive), ci.h = ci.high(productive), n = length(productive))
View(productive.vocab)
head(productive.vocab)
productive.vocab <- ddply(ws.data, .(age,gender), summarize, median = median(productive, na.rm=T), ci.l = ci.low(productive), ci.h = ci.high(productive), n = length(productive))
#Show productive vocabulary estimates
head(productive.vocab)
quartz(width=6,height=4)
ggplot(productive.vocab,
aes(x=age, y=median,colour=gender,label=gender))+
geom_pointrange(aes(ymin = median-ci.l,
ymax = median+ci.h),
size = .8,
show_guide = FALSE) +
geom_line(size=1) +
scale_x_continuous(breaks=seq(16,30,1),limits=c(16,30.5),
name = "Age (months)")+
scale_y_continuous(name = "Median Productive Vocabulary Size",
limits=c(0,680)) +
theme_bw(base_size=14) +
theme(legend.position="none") +
geom_dl(method=list(dl.trans(x=x +.2),"last.qp",cex=1)) +
scale_color_manual(values = c("#e41a1c","#377eb8"))
quartz(width=6,height=4)
ggplot(productive.vocab,
aes(x=age, y=median,colour=gender,label=gender))+
geom_pointrange(aes(ymin = median-ci.l,
ymax = median+ci.h),
size = .8,
show_guide = FALSE) +
geom_line(size=1) +
scale_x_continuous(breaks=seq(16,30,1),limits=c(16,30.5),
name = "Age (months)")+
scale_y_continuous(name = "Median Productive Vocabulary Size",
limits=c(0,680)) +
theme_bw(base_size=14) +
theme(legend.position="none") +
geom_dl(method=list(dl.trans(x=x +.2),"last.qp",cex=1)) +
scale_color_manual(values = c("#e41a1c","#377eb8"))
quartz(width=6,height=4)
ggplot(productive.vocab,
aes(x=age, y=median,colour=gender,label=gender))+
geom_pointrange(aes(ymin = median-ci.l,
ymax = median+ci.h),
size = .8,
show_guide = FALSE) +
geom_line(size=1) +
scale_x_continuous(breaks=seq(16,30,1),limits=c(16,30.5),
name = "Age (months)")+
scale_y_continuous(name = "Median Productive Vocabulary Size",
limits=c(0,680)) +
theme_bw(base_size=14) +
theme(legend.position="none") +
geom_dl(method=list(dl.trans(x=x +.2),"last.qp",cex=1)) +
scale_color_manual(values = c("#e41a1c","#377eb8"))
ggplot(productive.vocab,
aes(x=age, y=median,colour=gender,label=gender))+
geom_pointrange(aes(ymin = median-ci.l,
ymax = median+ci.h),
size = .8,
show_guide = FALSE) +
geom_line(size=1) +
scale_x_continuous(breaks=seq(16,30,1),limits=c(16,30.5),
name = "Age (months)")+
scale_y_continuous(name = "Median Productive Vocabulary Size",
limits=c(0,680)) +
theme_bw(base_size=14) +
theme(legend.position="none") +
geom_dl(method=list(dl.trans(x=x +.2),"last.qp",cex=1)) +
scale_color_manual(values = c("#e41a1c","#377eb8"))
